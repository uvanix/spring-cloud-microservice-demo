spring:
  application:
    name: cloud-eureka-server
  profiles:
    active: dev
  http:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  cloud:
    inetutils:
      use-only-site-local-interfaces: true
server:
  port: ${PORT:8761}
  session:
    timeout: 60
  tomcat:
    max-threads: 800
    uri-encoding: UTF-8
    basedir: logs
logging:
  config: classpath:config/logback-config.xml
  file: logs/cloud-eureka-server.log
security:
  user:
    name: user
    password: password
management:
  context-path: /mgmt
info:
  app:
    name: "@project.name@"
    description: "@project.description@"
    version: "@project.version@"

# 单节点 use command to startup [ nohup mvn clean spring-boot:run > /dev/null 2>&1 & ]
---
spring:
  profiles: dev
eureka:
  server:
    enable-self-preservation: false
    eviction-interval-timer-in-ms: 5000
  instance:
    hostname: localhost
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.ipAddress}:${server.port}
    status-page-url: http://${spring.cloud.client.ipAddress}:${server.port}${management.context-path}${endpoints.info.path:/info}
    health-check-url-path: http://${spring.cloud.client.ipAddress}:${server.port}${management.context-path}${endpoints.info.path:/health}
    metadata-map:
      management.context-path: ${management.context-path}
      user.name: ${security.user.name}
      user.password: ${security.user.password}
    leaseRenewalIntervalInSeconds: 5
    lease-expiration-duration-in-seconds: 15
  client:
    # 设置是否从注册中心获取注册信息（缺省true）
    # 因为这是一个单点的EurekaServer，不需要同步其它EurekaServer节点的数据，故设为false
    fetch-registry: false
    # 设置是否将自己作为客户端注册到注册中心（缺省true）
    # 这里为不需要（查看@EnableEurekaServer注解的源码，会发现它间接用到了@EnableDiscoveryClient）
    register-with-eureka: false
    serviceUrl:
      defaultZone: http://${security.user.name}:${security.user.password}@${eureka.instance.hostname}:${server.port}/eureka/

# 本机集群需配置host 127.0.0.1 peer1 127.0.0.1 peer2 127.0.0.1 peer3
# 集群节点1 use command to startup [ mvn spring-boot:run -Drun.jvmArguments="-Dspring.profiles.active=peer1" ]
---
spring:
  profiles: peer1
server:
  port: ${PORT:8001}
eureka:
  instance:
    hostname: ${spring.profiles}
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.ipAddress}:${server.port}
    status-page-url: http://${spring.cloud.client.ipAddress}:${server.port}${management.context-path}${endpoints.info.path:/info}
    health-check-url-path: http://${spring.cloud.client.ipAddress}:${server.port}${management.context-path}${endpoints.info.path:/health}
    metadata-map:
      management.context-path: ${management.context-path}
      user.name: ${security.user.name}
      user.password: ${security.user.password}
  client:
    serviceUrl:
      defaultZone: http://${security.user.name}:${security.user.password}@peer2:8002/eureka/,http://${security.user.name}:${security.user.password}@peer3:8003/eureka/

# 集群节点2 use command to startup [ mvn spring-boot:run -Drun.jvmArguments="-Dspring.profiles.active=peer2" ]
---
spring:
  profiles: peer2
server:
  port: ${PORT:8002}
eureka:
  instance:
    hostname: ${spring.profiles}
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.ipAddress}:${server.port}
    status-page-url: http://${spring.cloud.client.ipAddress}:${server.port}${management.context-path}${endpoints.info.path:/info}
    health-check-url-path: http://${spring.cloud.client.ipAddress}:${server.port}${management.context-path}${endpoints.info.path:/health}
    metadata-map:
      management.context-path: ${management.context-path}
      user.name: ${security.user.name}
      user.password: ${security.user.password}
  client:
    serviceUrl:
      defaultZone: http://${security.user.name}:${security.user.password}@peer1:8001/eureka/,http://${security.user.name}:${security.user.password}@peer3:8003/eureka/

# 集群节点3 use command to startup [ mvn spring-boot:run -Drun.jvmArguments="-Dspring.profiles.active=peer3" ]
---
spring:
  profiles: peer3
server:
  port: ${PORT:8003}
eureka:
  instance:
    hostname: ${spring.profiles}
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.ipAddress}:${server.port}
    status-page-url: http://${spring.cloud.client.ipAddress}:${server.port}${management.context-path}${endpoints.info.path:/info}
    health-check-url-path: http://${spring.cloud.client.ipAddress}:${server.port}${management.context-path}${endpoints.info.path:/health}
    metadata-map:
      management.context-path: ${management.context-path}
      user.name: ${security.user.name}
      user.password: ${security.user.password}
  client:
    serviceUrl:
      defaultZone: http://${security.user.name}:${security.user.password}@peer1:8001/eureka/,http://${security.user.name}:${security.user.password}@peer2:8002/eureka/
